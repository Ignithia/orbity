!function(t,s){"object"==typeof exports&&"undefined"!=typeof module?module.exports=s():"function"==typeof define&&define.amd?define(s):(t="undefined"!=typeof globalThis?globalThis:t||self).Orbity=s()}(this,(function(){"use strict";return class{constructor(t,s={}){this.canvas=t,this.ctx=t.getContext("2d"),this.tags=[],this.settings=Object.assign({radius:150,speed:1,easing:.1,paused:!1,enableTouch:!0,enableOrientation:!1,maxVelocity:.5,shape:"sphere"},s),this.rotation={x:0,y:0},this.velocity={x:.01,y:.01},this.touch={x:0,y:0,active:!1},this.animFrame=null,this._events={tagClick:[],tagHover:[],tagLeave:[]},this._hoveredIndex=null,this._init()}_init(){this._resize(),window.addEventListener("resize",(()=>this._resize())),this._bindTouch(),this._bindMouse(),this._bindOrientation(),this._attachInteraction(),this.canvas.setAttribute("role","img"),this.canvas.setAttribute("aria-label","3D tag cloud visualization"),this._animate()}_resize(){this.canvas.width=this.canvas.offsetWidth,this.canvas.height=this.canvas.offsetHeight,this.center={x:this.canvas.width/2,y:this.canvas.height/2},this._positionTags()}setTags(t){this.tags=t.map(((t,s)=>({...t,angleX:2*Math.random()*Math.PI,angleY:Math.random()*Math.PI,index:s,_screen:{}}))),this._positionTags()}_getRandomAngle(){return 2*Math.random()*Math.PI}addTag(t){this._validateTag(t)&&(this.tags.push({...t,angleX:this._getRandomAngle(),angleY:this._getRandomAngle(),index:this.tags.length,_screen:{}}),this._positionTags())}removeTag(t){this.tags.splice(t,1),this._positionTags()}updateTag(t,s){this.tags[t]?(Object.assign(this.tags[t],s),this._positionTags()):console.error(`Tag at index ${t} does not exist.`)}clearTags(){this.tags=[]}updateOptions(t){this.settings={...this.settings,...t},void 0===t.radius&&void 0===t.shape||this._positionTags(),void 0!==t.enableTouch&&this._bindTouch(),void 0!==t.enableOrientation&&this._bindOrientation(),void 0!==t.paused&&(t.paused?this.pause():this.resume())}_validateTag(t){return t.text&&"string"==typeof t.text?!(!t.color||!/^#[0-9A-F]{6}$/i.test(t.color))||(console.error("Invalid tag: 'color' must be a valid hex color code."),!1):(console.error("Invalid tag: 'text' is required and must be a string."),!1)}_bindTouch(){if(!this.settings.enableTouch)return;let t=0,s=0,e=0,i=0;this.canvas.addEventListener("touchstart",(a=>{this.touch.active=!0,t=a.touches[0].clientX,s=a.touches[0].clientY,e=0,i=0})),this.canvas.addEventListener("touchmove",(a=>{if(!this.touch.active)return;const n=a.touches[0].clientX-t,h=a.touches[0].clientY-s;e=Math.min(n*this.settings.speed,this.settings.maxVelocity),i=Math.min(h*this.settings.speed,this.settings.maxVelocity),this.velocity.x=Math.sign(i)*Math.min(Math.abs(i),this.settings.maxVelocity),this.velocity.y=Math.sign(e)*Math.min(Math.abs(e),this.settings.maxVelocity),t=a.touches[0].clientX,s=a.touches[0].clientY,a.preventDefault()}),{passive:!1}),this.canvas.addEventListener("touchend",(()=>{this.touch.active=!1,this.velocity.x=Math.sign(i)*Math.min(Math.abs(i),this.settings.maxVelocity),this.velocity.y=Math.sign(e)*Math.min(Math.abs(e),this.settings.maxVelocity)}))}_bindMouse(){let t=!1,s=0,e=0,i=0,a=0;this.canvas.addEventListener("mousedown",(n=>{t=!0,s=n.clientX,e=n.clientY,i=0,a=0})),this.canvas.addEventListener("mousemove",(n=>{if(!t)return;const h=n.clientX-s,o=n.clientY-e;i=Math.min(h*this.settings.speed,this.settings.maxVelocity),a=Math.min(o*this.settings.speed,this.settings.maxVelocity),this.velocity.x=Math.sign(a)*Math.min(Math.abs(a),this.settings.maxVelocity),this.velocity.y=Math.sign(i)*Math.min(Math.abs(i),this.settings.maxVelocity),s=n.clientX,e=n.clientY})),this.canvas.addEventListener("mouseup",(()=>{t=!1,this.velocity.x=Math.sign(a)*Math.min(Math.abs(a),this.settings.maxVelocity),this.velocity.y=Math.sign(i)*Math.min(Math.abs(i),this.settings.maxVelocity)})),this.canvas.addEventListener("mouseleave",(()=>{t=!1}))}_bindOrientation(){if(!this.settings.enableOrientation)return;let t=0;window.addEventListener("deviceorientation",(s=>{const e=Date.now();if(e-t<100)return;t=e;const{gamma:i=0,beta:a=0}=s;this.velocity.x=5e-4*i,this.velocity.y=5e-4*a}))}_attachInteraction(){this.canvas.addEventListener("click",this._onCanvasClick.bind(this)),this.canvas.addEventListener("mousemove",this._onCanvasMouseMove.bind(this)),this.canvas.addEventListener("mouseleave",this._onCanvasMouseLeave.bind(this))}_onCanvasClick(t){const s=this._getPointer(t),e=this._getTagAt(s);e&&this._events.tagClick.forEach((t=>t(e)))}_onCanvasMouseMove(t){const s=this._getPointer(t),e=this._getTagAt(s);if(e&&e.index!==this._hoveredIndex){if(null!==this._hoveredIndex){const t=this.tags[this._hoveredIndex];this._events.tagLeave.forEach((s=>s(t)))}this._hoveredIndex=e.index,this._events.tagHover.forEach((t=>t(e)))}else if(!e&&null!==this._hoveredIndex){const t=this.tags[this._hoveredIndex];this._events.tagLeave.forEach((s=>s(t))),this._hoveredIndex=null}}_onCanvasMouseLeave(){if(null!==this._hoveredIndex){const t=this.tags[this._hoveredIndex];this._events.tagLeave.forEach((s=>s(t))),this._hoveredIndex=null}}_getPointer(t){const s=this.canvas.getBoundingClientRect();return{x:t.clientX-s.left,y:t.clientY-s.top}}_getTagAt(t){for(let s=this.tags.length-1;s>=0;s--){const e=this.tags[s],i=e._screen;if(!i)continue;const a=t.x-i.x,n=t.y-i.y;if(Math.abs(a)<=i.width/2&&Math.abs(n)<=i.height/2)return e}return null}_positionTags(){if(!this.tags.length)return;const t=this.settings.radius,s=this.tags.length;switch(this.settings.shape||"sphere"){case"cube":const e=Math.ceil(Math.cbrt(s));this.tags.forEach(((s,i)=>{const a=i%e-e/2+.5,n=Math.floor(i/e)%e-e/2+.5,h=Math.floor(i/(e*e))-e/2+.5;s.x=a*(t/e)*2,s.y=n*(t/e)*2,s.z=h*(t/e)*2}));break;case"pyramid":let i=0;const a=Math.ceil(Math.sqrt(s));for(let e=0;e<a;e++){const n=a-e,h=t/a*e,o=t/a*(a-e);for(let t=0;t<n*n&&i<s;t++){const s=Math.floor(t/n)-n/2+.5,e=t%n-n/2+.5;this.tags[i].x=e*o/n,this.tags[i].y=-h,this.tags[i].z=s*o/n,i++}}break;case"helix":const n=2,h=2*t/s;this.tags.forEach(((e,i)=>{const a=i/s*2*Math.PI*n,o=i*h-t;e.x=t*Math.cos(a),e.y=o,e.z=t*Math.sin(a)}));break;case"ring":this.tags.forEach(((e,i)=>{const a=i/s*2*Math.PI;e.x=t*Math.cos(a),e.y=0,e.z=t*Math.sin(a)}));break;case"verticalRing":this.tags.forEach(((e,i)=>{const a=i/s*2*Math.PI;e.x=0,e.y=t*Math.sin(a),e.z=t*Math.cos(a)}));break;case"cylinder":const o=2*t/s,c=Math.ceil(Math.sqrt(s));this.tags.forEach(((s,e)=>{const i=Math.floor(e/c),a=e%c*(2*Math.PI/c),n=i*o-t;s.x=t*Math.cos(a),s.y=n,s.z=t*Math.sin(a)}));break;default:this.tags.forEach(((e,i)=>{const a=2*i/(s-1)-1,n=Math.acos(a),h=Math.sqrt(s*Math.PI)*n;e.x=t*Math.sin(n)*Math.cos(h),e.y=t*Math.sin(n)*Math.sin(h),e.z=t*Math.cos(n)}))}}_draw(){const{ctx:t,canvas:s,center:e}=this;t.clearRect(0,0,s.width,s.height);const i=[...this.tags].sort(((t,s)=>s.z-t.z));for(const s of i){const i=2*e.x/(2*e.x+s.z),a=s.x*i+e.x,n=s.y*i+e.y,h=(s.fontSize||15)*i,o=s.text||"",c=.2,r=1,l=(s.z+e.x)/(2*e.x);let d=Math.max(c,r-l*(r-c));d=Math.round(10*d)/10,t.globalAlpha=d,t.fillStyle=s.color||"#fff",t.font=`${h}px sans-serif`;const g=t.measureText(o);s._screen={x:a,y:n,width:g.width,height:h},t.fillText(o,a-g.width/2,n+h/2)}}_animate(){if(this.settings.paused)return;this.rotation.x+=(this.velocity.x-this.rotation.x)*this.settings.easing,this.rotation.y+=(this.velocity.y-this.rotation.y)*this.settings.easing,this.rotation.x+=this.settings.speed,this.rotation.y+=this.settings.speed;const t=this.settings.shape||"sphere";"ring"===t||"helix"===t?this.rotation.x=0:"verticalRing"===t&&(this.rotation.y=0);const s=Math.cos(this.rotation.y),e=Math.sin(this.rotation.y),i=Math.cos(this.rotation.x),a=Math.sin(this.rotation.x);this.tags.forEach((t=>{let{x:n,y:h,z:o}=t,c=n*s-o*e,r=n*e+o*s,l=h*i-r*a;r=h*a+r*i,t.x=c,t.y=l,t.z=r})),this._draw(),this.animFrame=requestAnimationFrame(this._animate.bind(this))}pause(){this.settings.paused=!0,this.animFrame&&cancelAnimationFrame(this.animFrame),this._events.pause?.forEach((t=>t()))}resume(){this.settings.paused=!1,this._animate(),this._events.resume?.forEach((t=>t()))}destroy(){this.pause(),window.removeEventListener("resize",this._resize),this.canvas.removeEventListener("touchstart",this._bindTouch),this.canvas.removeEventListener("mousemove",this._onCanvasMouseMove),this.canvas.removeEventListener("mouseleave",this._onCanvasMouseLeave),this.canvas.removeEventListener("click",this._onCanvasClick),window.removeEventListener("deviceorientation",this._bindOrientation),this.canvas.replaceWith(this.canvas.cloneNode(!0)),this.tags=[]}}}));
//# sourceMappingURL=orbity.min.js.map
